diff --git a/xbmc/application/Application.cpp b/xbmc/application/Application.cpp
index bf1feb6..020e9f4 100644
--- a/xbmc/application/Application.cpp
+++ b/xbmc/application/Application.cpp
@@ -445,11 +445,11 @@ bool CApplication::CreateGUI()
   m_frameMoveGuard.lock();
 
   const auto appPower = GetComponent<CApplicationPowerHandling>();
-  appPower->SetRenderGUI(true);
+  appPower->SetRenderGUI(false);
 
   auto windowSystems = KODI::WINDOWING::CWindowSystemFactory::GetWindowSystems();
 
-  const std::string& windowing = CServiceBroker::GetAppParams()->GetWindowing();
+  const std::string& windowing = "headless";
 
   if (!windowing.empty())
     windowSystems = {windowing};
@@ -587,9 +587,6 @@ bool CApplication::InitWindow(RESOLUTION res)
 
 bool CApplication::Initialize()
 {
-  m_pActiveAE->Start();
-  // restore AE's previous volume state
-
   const auto appVolume = GetComponent<CApplicationVolumeHandling>();
   const auto level = appVolume->GetVolumeRatio();
   const auto muted = appVolume->IsMuted();
@@ -669,15 +666,13 @@ bool CApplication::Initialize()
 
   const auto skinHandling = GetComponent<CApplicationSkinHandling>();
 
-  bool uiInitializationFinished = false;
+  bool uiInitializationFinished = true;
 
-  if (CServiceBroker::GetGUI()->GetWindowManager().Initialized())
+  if (true)
   {
     const auto settings = CServiceBroker::GetSettingsComponent()->GetSettings();
 
-    CServiceBroker::GetGUI()->GetWindowManager().CreateWindows();
-
-    skinHandling->m_confirmSkinChange = false;
+    skinHandling->m_confirmSkinChange = true;
 
     std::vector<AddonInfoPtr> incompatibleAddons;
     event.Reset();
@@ -700,8 +695,6 @@ bool CApplication::Initialize()
         iDots = 1;
         while (!event.Wait(1000ms))
         {
-          CServiceBroker::GetRenderSystem()->ShowSplash(std::string(iDots, ' ') + localizedStr +
-                                                        std::string(iDots, '.'));
           if (iDots == 3)
             iDots = 1;
           else
@@ -717,63 +710,7 @@ bool CApplication::Initialize()
       }
     }
 
-    // Start splashscreen and load skin
-    CServiceBroker::GetRenderSystem()->ShowSplash("");
-    skinHandling->m_confirmSkinChange = true;
-
-    auto setting = settings->GetSetting(CSettings::SETTING_LOOKANDFEEL_SKIN);
-    if (!setting)
-    {
-      CLog::Log(LOGFATAL, "Failed to load setting for: {}", CSettings::SETTING_LOOKANDFEEL_SKIN);
-      return false;
-    }
-
     CServiceBroker::RegisterTextureCache(std::make_shared<CTextureCache>());
-
-    std::string skinId = settings->GetString(CSettings::SETTING_LOOKANDFEEL_SKIN);
-    if (!skinHandling->LoadSkin(skinId))
-    {
-      CLog::Log(LOGERROR, "Failed to load skin '{}'", skinId);
-      std::string defaultSkin =
-          std::static_pointer_cast<const CSettingString>(setting)->GetDefault();
-      if (!skinHandling->LoadSkin(defaultSkin))
-      {
-        CLog::Log(LOGFATAL, "Default skin '{}' could not be loaded! Terminating..", defaultSkin);
-        return false;
-      }
-    }
-
-    // initialize splash window after splash screen disappears
-    // because we need a real window in the background which gets
-    // rendered while we load the main window or enter the master lock key
-    CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(WINDOW_SPLASH);
-
-    if (settings->GetBool(CSettings::SETTING_MASTERLOCK_STARTUPLOCK) &&
-        profileManager->GetMasterProfile().getLockMode() != LOCK_MODE_EVERYONE &&
-        !profileManager->GetMasterProfile().getLockCode().empty())
-    {
-      g_passwordManager.CheckStartUpLock();
-    }
-
-    // check if we should use the login screen
-    if (profileManager->UsingLoginScreen())
-    {
-      CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(WINDOW_LOGIN_SCREEN);
-    }
-    else
-    {
-      // activate the configured start window
-      int firstWindow = g_SkinInfo->GetFirstWindow();
-      CServiceBroker::GetGUI()->GetWindowManager().ActivateWindow(firstWindow);
-
-      if (CServiceBroker::GetGUI()->GetWindowManager().IsWindowActive(WINDOW_STARTUP_ANIM))
-      {
-        CLog::Log(LOGWARNING, "CApplication::Initialize - startup.xml taints init process");
-      }
-
-      // the startup window is considered part of the initialization as it most likely switches to the final window
-      uiInitializationFinished = firstWindow != WINDOW_STARTUP_ANIM;
-    }
   }
   else //No GUI Created
   {
@@ -814,11 +751,6 @@ bool CApplication::Initialize()
 
   CLog::Log(LOGINFO, "initialize done");
 
-  const auto appPower = GetComponent<CApplicationPowerHandling>();
-  appPower->CheckOSScreenSaverInhibitionSetting();
-  // reset our screensaver (starts timers etc.)
-  appPower->ResetScreenSaver();
-
   // if the user interfaces has been fully initialized let everyone know
   if (uiInitializationFinished)
   {
