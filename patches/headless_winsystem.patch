diff --git a/xbmc/platform/linux/PlatformLinux.cpp b/xbmc/platform/linux/PlatformLinux.cpp
index 6be5163883..c423e1dddc 100644
--- a/xbmc/platform/linux/PlatformLinux.cpp
+++ b/xbmc/platform/linux/PlatformLinux.cpp
@@ -24,6 +24,7 @@
 #endif
 
 #include "platform/linux/powermanagement/LinuxPowerSyscall.h"
+#include "windowing/WinSystemHeadless.h"
 
 // clang-format off
 #if defined(HAS_GLES)
@@ -91,6 +92,7 @@ bool CPlatformLinux::InitStageOne()
 #endif
 #endif
 
+  CWinSystemHeadless::Register();
   RegisterPowerManagement();
 
   std::string_view sink = CServiceBroker::GetAppParams()->GetAudioBackend();
diff --git a/xbmc/windowing/CMakeLists.txt b/xbmc/windowing/CMakeLists.txt
index 21c7611912..1e58f1b6d1 100644
--- a/xbmc/windowing/CMakeLists.txt
+++ b/xbmc/windowing/CMakeLists.txt
@@ -2,6 +2,7 @@ set(SOURCES GraphicContext.cpp
             OSScreenSaver.cpp
             Resolution.cpp
             WindowSystemFactory.cpp
+            WinSystemHeadless.cpp
             WinSystem.cpp)
 
 set(HEADERS GraphicContext.h
@@ -9,6 +10,7 @@ set(HEADERS GraphicContext.h
             Resolution.h
             WinEvents.h
             WindowSystemFactory.h
+            WinSystemHeadless.h
             WinSystem.h
             XBMC_events.h
             VideoSync.h)
diff --git a/xbmc/windowing/WinSystemHeadless.cpp b/xbmc/windowing/WinSystemHeadless.cpp
new file mode 100644
index 0000000000..7545e82c97
--- /dev/null
+++ b/xbmc/windowing/WinSystemHeadless.cpp
@@ -0,0 +1,68 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "WinSystemHeadless.h"
+
+#include "windowing/WindowSystemFactory.h"
+
+#include "utils/log.h"
+
+#include <vector>
+#include <string>
+
+using namespace KODI::WINDOWING;
+
+#define EGL_NO_CONFIG (EGLConfig)0
+
+void CWinSystemHeadless::Register()
+{
+  KODI::WINDOWING::CWindowSystemFactory::RegisterWindowSystem(CreateWinSystem, "headless");
+}
+
+std::unique_ptr<CWinSystemBase> CWinSystemHeadless::CreateWinSystem()
+{
+  return std::make_unique<CWinSystemHeadless>();
+}
+
+CWinSystemHeadless::CWinSystemHeadless() : CWinSystemBase(), CRenderSystemBase()
+{
+}
+
+CWinSystemHeadless::~CWinSystemHeadless() = default;
+
+// bool CWinSystemHeadless::MessagePump()
+// {
+//   return m_winEvents->MessagePump();
+// }
+
+bool CWinSystemHeadless::InitWindowSystem() {return true;};
+bool CWinSystemHeadless::DestroyWindowSystem() {return true;};
+bool CWinSystemHeadless::CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) {return true;};
+bool CWinSystemHeadless::DestroyWindow() {return true;};
+bool CWinSystemHeadless::ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) {return true;};
+void CWinSystemHeadless::FinishWindowResize(int newWidth, int newHeight) {};
+bool CWinSystemHeadless::SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) {return true;};
+void CWinSystemHeadless::UpdateResolutions() {};
+void CWinSystemHeadless::ShowOSMouse(bool show) {};
+
+void CWinSystemHeadless::NotifyAppActiveChange(bool bActivated) {};
+void CWinSystemHeadless::NotifyAppFocusChange(bool bGaining) {};
+
+bool CWinSystemHeadless::Minimize() {return true;};
+bool CWinSystemHeadless::Restore() {return true;};
+bool CWinSystemHeadless::Hide() {return true;};
+bool CWinSystemHeadless::Show(bool raise) {return true;};
+void CWinSystemHeadless::Register(IDispResource *resource) {};
+void CWinSystemHeadless::Unregister(IDispResource *resource) {};
+bool CWinSystemHeadless::HasCalibration(const RESOLUTION_INFO &resInfo) {return true;};
+bool CWinSystemHeadless::UseLimitedColor() {return true;};
+
+void CWinSystemHeadless::ShowSplash(const std::string& message)
+{
+  CLog::Log(LOGDEBUG, message.c_str());
+};
diff --git a/xbmc/windowing/WinSystemHeadless.h b/xbmc/windowing/WinSystemHeadless.h
new file mode 100644
index 0000000000..51e9e5156b
--- /dev/null
+++ b/xbmc/windowing/WinSystemHeadless.h
@@ -0,0 +1,80 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "rendering/RenderSystem.h"
+#include "WinSystem.h"
+
+#include <string>
+#include <vector>
+
+class CWinSystemHeadless : public CWinSystemBase, public CRenderSystemBase
+{
+public:
+  CWinSystemHeadless();
+  ~CWinSystemHeadless() override;
+
+  static void Register();
+  static std::unique_ptr<CWinSystemBase> CreateWinSystem();
+
+  // CWinSystemBase
+  CRenderSystemBase *GetRenderSystem() override { return this; }
+  bool InitWindowSystem() override;
+  bool DestroyWindowSystem() override;
+  bool CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) override;
+  bool DestroyWindow() override;
+  bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
+  void FinishWindowResize(int newWidth, int newHeight) override;
+  bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
+  void UpdateResolutions() override;
+  void ShowOSMouse(bool show) override;
+
+  void NotifyAppActiveChange(bool bActivated) override;
+  void NotifyAppFocusChange(bool bGaining) override;
+
+  bool Minimize() override;
+  bool Restore() override;
+  bool Hide() override;
+  bool Show(bool raise = true) override;
+  void Register(IDispResource *resource) override;
+  void Unregister(IDispResource *resource) override;
+  bool HasCalibration(const RESOLUTION_INFO &resInfo) override;
+  bool UseLimitedColor() override;
+
+  // winevents override
+  //bool MessagePump() override;
+
+  // render
+  bool InitRenderSystem() override { return true;} ;
+  bool DestroyRenderSystem() override { return true;} ;
+  bool ResetRenderSystem(int width, int height) override { return true;} ;
+
+  bool BeginRender() override { return true;} ;
+  bool EndRender() override { return true;} ;
+  void PresentRender(bool rendered, bool videoLayer) override {} ;
+  bool ClearBuffers(UTILS::COLOR::Color color) override { return true;} ;
+  bool IsExtSupported(const char* extension) const override { return false;} ;
+
+  void SetViewPort(const CRect& viewPort) override {} ;
+  void GetViewPort(CRect& viewPort) override {} ;
+
+  void SetScissors(const CRect &rect) override {} ;
+  void ResetScissors() override {} ;
+
+  void CaptureStateBlock() override {} ;
+  void ApplyStateBlock() override {} ;
+
+  void SetCameraPosition(const CPoint &camera, int screenWidth, int screenHeight, float stereoFactor = 0.f) override {} ;
+  void ShowSplash(const std::string& message) override;
+
+protected:
+
+private:
+
+};
